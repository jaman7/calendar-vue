App.vue
<script setup lang="ts">
import { ref } from 'vue';
import CustomRangePicker from './components/CustomRangePicker.vue';
import type { IDictType } from './shared/types/dictionaryTypes';
import { createDictFromListArray } from './shared/utils/dictionaries';

const selectedData = ref({});

const allowedOptions: string[] = [
  'last-7-days',
  'this-month',
  'year',
  'quarter',
  'month',
  'week',
  'day',
  'hour',
  'minute',
  'date-from',
  'date-to',
  'date-from-to',
];

const allowedOptionsDict: IDictType[] = createDictFromListArray(allowedOptions);
</script>

<template>
  <div class="min-h-screen p-10 bg-gray-50">
    <h1 class="text-xl font-bold mb-4">Customisable Calendar Component</h1>

    <CustomRangePicker
      :allowedOptionsDict="allowedOptionsDict"
      :min-date="'2022-01-01'"
      :max-date="'2025-12-31'"
      :min-value="1"
      :max-value="1000"
      v-model="selectedData"
    />

    <div class="mt-6 p-4 bg-white rounded-lg shadow">
      <h2 class="font-semibold mb-2">Output JSON:</h2>
      <pre class="text-sm bg-gray-100 p-2 rounded-lg shadow">{{ selectedData }}</pre>
    </div>
  </div>
</template>

main.ts
import { createApp } from 'vue';
import App from './App.vue';
import './assests/scss/main.scss';

const app = createApp(App);

app.mount('#app');

components\CustomRangePicker.vue
<script setup lang="ts">
import type { IDictType } from '@/shared/types/dictionaryTypes';
import { format } from 'date-fns';
import { computed, ref, watch } from 'vue';
import DatePicker from './parts/DatePicker.vue';
import ModeSelect from './parts/ModeSelect.vue';
import ValueInput from './parts/ValueInput.vue';

interface IProps {
  allowedOptionsDict: IDictType[];
  minDate?: string;
  maxDate?: string;
  minValue?: number;
  maxValue?: number;
}

const props = defineProps<IProps>();
const emit = defineEmits(['update:modelValue']);

const errorMessage = ref('');
const mode = ref('');
const value = ref<number | null>(null);
const from = ref('');
const to = ref('');

const formatDate = (d: Date) => format(d, 'yyyy-MM-dd');

const applyShortcut = (modeVal: string) => {
  const d = new Date();
  if (modeVal === 'last-7-days') {
    const fromDate = new Date(d);
    fromDate.setDate(d.getDate() - 6);
    from.value = formatDate(fromDate);
    to.value = formatDate(d);
  }
  if (modeVal === 'this-month') {
    const start = new Date(d.getFullYear(), d.getMonth(), 1);
    const end = new Date(d.getFullYear(), d.getMonth() + 1, 0);
    from.value = formatDate(start);
    to.value = formatDate(end);
  }
};

const showInput = computed(() => ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute'].indexOf(mode.value) > -1);

const showFrom = computed(() => ['date-from', 'date-from-to', 'last-7-days', 'this-month'].indexOf(mode.value) > -1);

const showTo = computed(() => ['date-to', 'date-from-to', 'last-7-days', 'this-month'].indexOf(mode.value) > -1);

watch(mode, (newMode) => {
  if (['last-7-days', 'this-month'].indexOf(newMode) > -1) {
    applyShortcut(newMode);
  } else {
    from.value = '';
    to.value = '';
  }
});

watch([mode, value, from, to], () => {
  errorMessage.value = '';

  if (showFrom.value && showTo.value && from.value && to.value) {
    if (new Date(from.value) > new Date(to.value)) {
      errorMessage.value = 'Date From cannot be later than Date To';
    }
  }

  emit('update:modelValue', {
    mode: mode.value,
    ...(showInput.value ? { value: value.value } : {}),
    ...(showFrom.value ? { from: from.value } : {}),
    ...(showTo.value ? { to: to.value } : {}),
    error: errorMessage.value || undefined,
  });
});
</script>

<template>
  <div class="flex flex-col gap-4 bg-white p-6 rounded-lg shadow-md w-full max-w-xl">
    <div>
      <label class="text-sm text-gray-600 mb-1 block">Select time mode</label>
      <ModeSelect v-model="mode" :dict="props.allowedOptionsDict" />
    </div>

    <div v-if="showInput">
      <label class="text-sm text-gray-600 mb-1 block">Enter value</label>
      <ValueInput v-model="value" :min="props.minValue" :max="props.maxValue" />
    </div>

    <div v-if="showFrom">
      <label class="text-sm text-gray-600 mb-1 block">From</label>
      <DatePicker v-model="from" :min="props.minDate" :max="props.maxDate" />
    </div>

    <div v-if="showTo">
      <label class="text-sm text-gray-600 mb-1 block">To</label>
      <DatePicker v-model="to" :min="props.minDate" :max="props.maxDate" />
    </div>

    <p v-if="errorMessage" class="text-red-500 text-sm mt-1">{{ errorMessage }}</p>
  </div>
</template>

<style scoped>
input,
select {
  @apply border border-gray-400 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500;
}
</style>

components\parts\DatePicker.vue
<script setup lang="ts">
defineProps<{
  modelValue: string;
  min?: string;
  max?: string;
}>();
const emit = defineEmits(['update:modelValue']);
</script>

<template>
  <input
    type="date"
    :value="modelValue"
    @input="$emit('update:modelValue', ($event?.target as HTMLInputElement)?.value)"
    class="p-2 border border-gray-300 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500"
    :min="min"
    :max="max"
  />
</template>

components\parts\ModeSelect.vue
<script setup lang="ts">
import type { IDictType } from '@/shared/types/dictionaryTypes';

defineProps<{
  modelValue: string;
  dict: IDictType[];
}>();
const emit = defineEmits(['update:modelValue']);
</script>

<template>
  <select
    :value="modelValue"
    @change="$emit('update:modelValue', ($event.target as HTMLSelectElement)?.value)"
    class="p-2 border border-gray-300 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500"
  >
    <option value="">Select mode</option>
    <option v-for="opt in dict" :key="opt.id" :value="opt.id">
      {{ opt.displayName }}
    </option>
  </select>
</template>

components\parts\ValueInput.vue
<script setup lang="ts">
defineProps<{
  modelValue: number | null;
  min?: number;
  max?: number;
}>();
const emit = defineEmits(['update:modelValue']);
</script>

<template>
  <input
    type="number"
    :value="modelValue ?? ''"
    @input="$emit('update:modelValue', ($event?.target as HTMLInputElement)?.valueAsNumber)"
    class="p-2 border border-gray-300 rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-500"
    :min="min"
    :max="max"
    placeholder="Enter value"
  />
</template>

shared\types\dictionaryTypes.ts
export interface IDictType {
  displayName?: string;
  id?: number | string;
  [name: string]: any;
}

shared\utils\dictionaries.ts
import type { IDictType } from '../types/dictionaryTypes';

export function createDictFromListArray(listNames: string[]): IDictType[] {
  return listNames?.map((key) => ({ id: key, displayName: key })) ?? [];
}

